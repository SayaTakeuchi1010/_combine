#!/usr/bin/env python
# This program is public domain
"""
Simple test suite: if any module in the current directory has a test()
function, then import that module and run the test.

If called with a command line argument, run tests for each function
named on the command line.
"""
package = 'reflectometry.reduction'

import sys
import glob
import traceback

def _print_error(msg,indent=2):
    """Display error message and exception context."""
    print msg
    errtext = traceback.format_exc(1).rstrip()
    for line in ["  "+s for s in errtext.split('\n')]:
        print " "*(indent-1),line

def run_tests(package, module_list, verbose=True):
    """Run module.test() for each listed module in the package."""
    passing=[]
    failing=[]
    missing=[]
    for module_name in module_list:
        if verbose:
            # Let the user know which module is being tested.
            print "%s:"%module_name,
            sys.stdout.flush()

        # First try importing the module
        try:
            module = __import__(package+'.'+module_name, fromlist=['test'],level=0)
        except:
            if verbose: _print_error("Import failed")
            failing.append(module_name)
	    continue
        if not hasattr(module,'test'):
            if verbose: print "No tests"
            missing.append(module_name)
	    continue

        # Then try running the test, 
        try:
            module.test()
            if verbose: print "Tests passed"
            passing.append(module_name)
        except:
            if verbose: _print_error("Tests failed")
            failing.append(module_name)

    # Print summary
    if verbose: print "=============="
    #if passing != []: print "passing:",passing
    if missing != []: print "untested:"," ".join(missing)
    if failing != []: print "failing:"," ".join(failing)
    print "#pass=%d  #fail=%d  #missing=%d"\
        %(len(passing),len(failing),len(missing))

if __name__ == "__main__":
    if len(sys.argv) > 1:
         files = sys.argv[1:]
    else:
         files = glob.glob('*.py')
    run_tests(package, [f[:-3] if f.endswith('.py') else f for f in files])

