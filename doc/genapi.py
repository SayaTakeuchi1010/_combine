from __future__ import with_statement
import os.path

MODULE_TEMPLATE=""".. Autogenerated by genmods.py

******************************************************************************
%(name)s
******************************************************************************

:mod:`%(package)s.%(module)s`
==============================================================================

.. automodule:: %(package)s.%(module)s
   :members:
   :undoc-members:
   :inherited-members:
   :show-inheritance:

"""

INDEX_TEMPLATE=""".. Autogenerated by genmods.py

.. _%(package)s-api-index:

##############################################################################
   %(package_name)s
##############################################################################

.. only:: html

   :Release: |version|
   :Date: |today|

.. toctree::
   :titlesonly:
   :numbered: 1
   :maxdepth: 2

   %(rsts)s
"""


def genfiles(package, package_name, modules, dir='api'):

    if not os.path.exists(dir):
        os.makedirs(dir)

    for module,name in modules:
        #print "module","name", module,name
        with open(os.path.join(dir,module+'.rst'), 'w') as f:
            f.write(MODULE_TEMPLATE%locals())

    rsts = "\n   ".join(module+'.rst' for module,name in modules)
    with open(os.path.join(dir,'index.rst'),'w') as f:
        f.write(INDEX_TEMPLATE%locals())

def dataflow():
    modules=[
        ('anno_exc', 'annotate exceptions'),
        ('cache', 'redis/memory cache manager'),
        ('calc', 'template calculator'),
        ('core', 'instrument definition'),
        ('deps', 'graph dependeny resolution'),
        ('fakeredis', 'memory-based cache manager with redis interface'),
        ('store', 'template serializer'),
    ]
    package = 'dataflow'
    package_name = 'Dataflow'
    genfiles(package, package_name, modules, dir=package)

def reflred():
    modules=[
        # Modules moved to reflred-old
        #('data', 'generic data file support'),
        #('fresnel', 'Fresnel reflectivity calculation'),
        #('h5natural', 'monkeypatch for h5py to support tab completion'),
        #('h5nexus', 'NeXus reader/writer using h5py'),
        #('limits', 'set consistent data ranges across datasets'),
        #('pipeline', 'pipeline processor for reduction steps'),
        #('properties', 'manage instrument properties'),
        #('qxqz', 'Qx-Qz to angle calculations'),
        #('registry', 'data loader registry'),
        #('ticker', 'matplotlib log scale ticker'),
        #('formats.bruker', 'Bruker X-ray data reader'),
        #('formats.icpformat', 'ICP data reader'),
        #('formats.ncnr_ng1', 'NG-1 ICP reader'),
        #('formats.ncnr_ng7', 'NG-7 ICP reader'),
        #('formats.rigaku', 'Rigaku X-ray data reader'),
        ('err1d', '1-D error propagation functions'),
        ('errutil', 'extensions to the PyPI uncertainties package'),
        ('formatnum', 'nice formatting of uncertain numbers'),
        ('hzf_readonly_stripped', 'zip NeXus reader'),
        ('iso8601', 'timestamp parsing and printing'),
        ('rebin', 'rebinning support'),
        ('uncertainty', '1-D uncertainty type'),
        ('unit', 'NeXus file units support'),
        ('wsolve', 'linear regression with uncertainty'),
        ('steps.angles', 'angle corrections'),
        ('steps.background', 'background alignment and subtraction'),
        ('steps.deadtime', 'dead time corrections'),
        ('steps.deadtime_fit', 'dead time estimation routines'),
        ('steps.footprint', 'footprint correction'),
        ('steps.intent', 'intent marking'),
        ('steps.joindata', 'data joining'),
        ('steps.load', 'data loader'),
        ('steps.polarization', 'polarization correction'),
        ('steps.refldata', 'reflectometry data structure'),
        ('steps.resolution', 'reflectometry resolution calculations'),
        ('steps.scale', 'data scaling'),
        ('steps.smoothslits', 'slit scan smoothing'),
        ('steps.steps', 'data correction wrappers'),
        ('steps.util', 'data correction helper functions'),
    ]
    package = 'reflred'
    package_name = 'Reflred'
    genfiles(package, package_name, modules, dir=package)


dataflow()
reflred()

